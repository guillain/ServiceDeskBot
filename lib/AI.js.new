/**
 * @file Defines ServiceDesk functions for Spark
 * @author guillain <guillain@gmail.com>
 * @license LGPL-3.0
 */
// Load config
var config = require('../config');

var request = require("request");

var redis = require("redis");
var client = redis.createClient({detect_buffers: true});

var Search = require('redis-search');
var search = Search.createSearch(config.SD.storage);

var fs = require('fs');

exports.search = function(bot, trigger) {
  var tosay = '_Search result_ \n';

  var phrase = '';
  for (i = 0; i < trigger.args.length; i++) {
    if(i == 0) { phrase  = trigger.args[i]; }
    else       { phrase += ' '+trigger.args[i]; }
  }

  client.hgetall(config.SD.storage, function(err,kms){
    if (err) throw err;
    cpt = [][];

    // Keyword evalution
    for (var i = 0; i < trigger.args.length; i++) {
      word = trigger.args[i];
      if(word.length > 3) {
        cpt[word]['id'] = 0;
        for (var j in kms) { 
          var re =  new RegExp('\\b'+ word + '\\b','j');
          if(re.exec(kms[j])) { 
            cpt[word]['id']++; 
            cpt[word][j] = kms[j];
          }
        }
      }
    }

    // Check cpt result
    if (cpt.length == 0) {
      tosay = config.msg.notfound;
    }
    else (
      for (var i = 1; i < cpt.length; i++){
        if (cpt[i]['id'] > cpt[i-1]['id']) {
          cpt[i]['maxref'] = i;
        }
      cpt.length > config.SD.searchlimit) {
      tosay += '\n'+j+' result found but '+config.SD.searchlimit+' displayed\n';
    }

    say  = config.msg.intro + '\n\n';
    say += config.msg.flash + '\n\n';
    say += tosay + '\n\n';
    say += config.msg.tips + '\n\n';
    bot.say(say);
  });
}
